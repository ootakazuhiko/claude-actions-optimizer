# Python プロジェクト用の最適化ワークフロー例

name: Python Optimized CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main, master]

jobs:
  # Draft PR用の軽量チェック
  draft-checks:
    name: Draft PR Light Checks
    if: github.event.pull_request.draft == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install basic dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt --no-deps --dry-run
          elif [ -f pyproject.toml ]; then
            pip install -e . --no-deps --dry-run
          fi
          
      - name: Basic syntax check
        run: |
          python -m py_compile **/*.py || echo "Syntax check completed"
          
      - name: Quick linting
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # Ready PR用のフルCI
  full-ci:
    name: Full CI Pipeline
    if: github.event.pull_request.draft == false || github.event_name == 'push'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f pyproject.toml ]; then
            pip install -e .[dev]
          fi
          
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Type checking with mypy
        run: |
          pip install mypy
          mypy . || true
          
      - name: Test with pytest
        run: |
          pip install pytest pytest-cov
          pytest --cov=. --cov-report=xml
          
      - name: Upload coverage
        if: matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  # セキュリティチェック
  security-scan:
    name: Security Scan
    if: github.event.pull_request.draft == false || github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Security audit
        run: |
          pip install safety bandit
          safety check || true
          bandit -r . -f json -o bandit-report.json || true
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json